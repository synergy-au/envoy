[tool.black]
line-length = 120

[tool.pytest.ini_options]
pythonpath = ["src/"]
testpaths = "tests"
filterwarnings = ["error::DeprecationWarning"]
addopts = "--strict-markers"
markers = [
    "cert_header: marks tests to use a custom value for cert_header instead of the default",
    "href_prefix: marks tests to use a custom value for href_prefix instead of the default of None",
    "no_default_doe: marks tests to disable the default DOE config values (disables default DERControl endpoint)",
    "azure_ad_auth: marks tests to enable the azure active directory auth dependency",
    "azure_ad_db: marks tests to enable the azure active directory dynamic db creds dependency (requires azure_ad_auth)",
    "azure_ad_db_refresh_secs: marks tests to set the config value azure_ad_db_refresh_secs (requires azure_ad_db)",
    "admin_ro_user: marks tests that install the admin server 'Read Only' user/passwords",
    "disable_device_registration: marks tests that disable NULL Aggregator and disable unrecognised devices from registering (equivalent to allow_device_registration = False)",
    "nmi_validation_enabled: marks tests that enables NMI validation logic for the PUT ConnectionPoint endpoint.",
]

# (for pytests only) Using pytest-env to set placeholder values for required settings.
# D: implies default, with environment variables taking precedence.
env = [
    "D:DATABASE_URL=postgresql+asyncpg://faketestcred:faketestcred@faketestcred/faketestcred",
    "D:ADMIN_USERNAME=testadmin",
    "D:ADMIN_PASSWORD=testpassword",
]


[tool.bandit]
exclude_dirs = ["tests"]

[tool.mypy]
exclude = ["src/envoy/server/alembic", "tests", "build", "dist"]
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
namespace_packages = true
warn_redundant_casts = true

[build-system]
requires = ["setuptools >= 40.9.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "envoy"
dynamic = ["version", "readme"]
requires-python = ">=3.9,<4.0"
dependencies = [
    "fastapi>=0.94.1",
    "sqlalchemy>=2.0.0",
    "alembic",
    "tzlocal",
    "pydantic_xml[lxml]>=2.12.0",
    "pydantic!=2.7.0,!=2.12.0",
    "pydantic-xml!=2.9.1,!=2.17.1", # Known compatibility issues with pydantic and typing libs
    "pydantic-settings",
    "python-dateutil",
    "asyncpg",
    "fastapi-async-sqlalchemy",
    "alembic",
    "python-dotenv",
    "uvicorn",
    "pyjwt",
    "cryptography",
    "httpx",
    "taskiq!=0.11.5,!=0.11.6",      # Known compatibiity issue with pydantic
    "taskiq-aio-pika",
    "parse",
    "envoy_schema @ git+https://github.com/synergy-au/envoy-schema.git@v0.27.0-storage.0.4.0",
    "intervaltree",
]

[project.optional-dependencies]
dev = [
    "bandit",
    "flake8",
    "mypy",
    "sqlalchemy[mypy]",
    "types-python-dateutil",
    "types-tzlocal",
    "black",
    "coverage",
    "pytest-cov",
]
test = [
    "pytest",
    "pytest-asyncio",
    "pytest-xdist",
    "anyio",
    "pytest-mock",
    "pytest-postgresql",
    "psycopg",
    "httpx",
    "defusedxml",
    "asgi_lifespan",
    "assertical>=0.3.1",
    "pytest-env",
    "freezegun",
]

[tool.setuptools.package-data]
"envoy" = ["py.typed", "server/alembic.ini"]

[tool.setuptools.dynamic]
version = { attr = "envoy.__version__" }
readme = { file = ["README.md"], content-type = "text/markdown" }
